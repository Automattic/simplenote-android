// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.4.32'

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.38'
    }
}


def gitHash() {
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--verify', '--short', 'HEAD'
            standardOutput = code
        }
        return code.toString().trim()
    }
    catch (ignored) {
        return "<unknown>"
    }
}

def gitDescribe(){
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=-dirty'
            standardOutput = code
        }
        return code.toString().trim()
    }
    catch (ignored) {
        return "<unknown>"
    }
}

def gitVersion() {
    (gitDescribe() =~ /^v/).replaceFirst('')
}

// Onboarding and dev env setup tasks
task checkBundler(type:Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task checkBundle(type:Exec, dependsOn:checkBundler) {
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task applyCredentials(type:Exec, dependsOn:checkBundle) {
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}
