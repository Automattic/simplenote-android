# frozen_string_literal: true

default_platform(:android)
fastlane_require 'dotenv'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

USER_ENV_FILE_PATH = File.join(Dir.home, '.simplenoteandroid-env.default')
PROTOTYPE_BUILD_DOMAIN = 'https://d2twmm2nzpx3bg.cloudfront.net'

before_all do
  # TODO: Use EnvManager — https://github.com/wordpress-mobile/release-toolkit/pull/578
  UI.user_error!("#{USER_ENV_FILE_PATH} not found: Please copy env.example to #{USER_ENV_FILE_PATH} and fill in the values") unless is_ci || File.file?(USER_ENV_FILE_PATH)
  Dotenv.load(USER_ENV_FILE_PATH)
end

PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))

ORGANIZATION = 'automattic'
REPO_NAME = 'simplenote-android'
GITHUB_REPO = "#{ORGANIZATION}/#{REPO_NAME}".freeze
DEFAULT_BRANCH = 'trunk'
BUILDKITE_ORG = ORGANIZATION
BUILDKITE_PIPELINE = REPO_NAME
APP_PACKAGE_NAME = 'com.automattic.simplenote'

APP_SOURCES_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'Simplenote')
METADATA_FOLDER = File.join(APP_SOURCES_FOLDER, 'metadata')
BUILD_FOLDER = File.join(APP_SOURCES_FOLDER, 'build')
RES_FOLDER = File.join(APP_SOURCES_FOLDER, 'src', 'main', 'res')
MAIN_STRINGS_PATH = File.join(RES_FOLDER, 'values', 'strings.xml')
UPDATE_STRINGS_PATH = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'resources', 'values')

GLOTPRESS_BASE_URL = 'https://translate.wordpress.com/projects'
# URL of the GlotPress project containing the app's strings
#
# Notice the trailing / is required.
# Without it, GlotPress will redirect to the version with /
GLOTPRESS_APP_STRINGS_PROJECT_URL = "#{GLOTPRESS_BASE_URL}/simplenote/android/".freeze
# URL of the GlotPress project containing the Play Store metadata (title, keywords, release notes, …)
GLOTPRESS_STORE_METADATA_PROJECT_URL = "#{GLOTPRESS_APP_STRINGS_PROJECT_URL}release-notes/".freeze

RELEASE_NOTES_SOURCE_PATH = File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt')
RELEASE_NOTES_PATH = File.join(METADATA_FOLDER, 'release_notes.txt')

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(PROJECT_ROOT_FOLDER, '.configure-files', 'google-upload-credentials.json')

GRADLE_APK_OUTPUT_PATH = File.join(BUILD_FOLDER, 'outputs', 'apk', 'release', 'Simplenote-release.apk')

VERSION_PROPERTIES_PATH = File.join(PROJECT_ROOT_FOLDER, 'version.properties')

VERSION_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SemanticVersionCalculator.new
VERSION_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::RCNotationVersionFormatter.new
BUILD_CODE_FORMATTER = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeFormatter.new
BUILD_CODE_CALCULATOR = Fastlane::Wpmreleasetoolkit::Versioning::SimpleBuildCodeCalculator.new
VERSION_FILE = Fastlane::Wpmreleasetoolkit::Versioning::AndroidVersionFile.new(version_properties_path: VERSION_PROPERTIES_PATH)

# Important: These need to be imported after all the constants have been defined because they access them.
# A bit of a leaky abstraction but makes for lanes that are easier to write...
import 'lanes/build.rb'
import 'lanes/localization.rb'
import 'lanes/release.rb'

platform :android do
  ENV['PROJECT_ROOT_FOLDER'] = "#{File.dirname(File.expand_path(__dir__))}/"
  ENV['PROJECT_NAME'] = 'Simplenote'
  ENV['validate_translations'] = 'buildRelease'
  ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

  desc 'Updates a release branch for a new beta release'
  lane :new_beta_release do |skip_confirm: false|
    ensure_git_status_clean
    ensure_git_branch_is_release_branch!

    message = <<~MESSAGE
      New beta release:
      - Current beta version: #{release_version_current}
      - New beta version: #{release_version_next_beta}

      - Current build code: #{build_code_current}
      - New build code: #{build_code_next}
    MESSAGE
    UI.important(message)

    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    UI.message 'Bumping beta version and build code...'
    VERSION_FILE.write_version(
      version_name: release_version_next_beta,
      version_code: build_code_next
    )
    commit_version_bump
    # Print computed version and build to let user double-check outcome in logs
    UI.success("Done! New beta version: #{release_version_current}. New build code: #{build_code_current}")

    download_translations
    download_metadata_strings

    UI.important('Pushing changes to remote and triggering the beta build...')
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    push_to_git_remote(tags: false)

    trigger_release_build(branch_to_build: release_branch_name)

    # TODO: Switch to working branch and open back-merge PR
  end

  desc 'Creates a new hotfix branch from the given tag'
  lane :new_hotfix_release do |version_name:, version_code:, skip_confirm: false|
    ensure_git_status_clean

    new_version = version_name
    version_code_new = version_code

    previous_version = VERSION_FORMATTER.release_version(
      VERSION_CALCULATOR.previous_patch_version(version: VERSION_FORMATTER.parse(new_version))
    )

    UI.user_error!("The version `#{new_version}` tag already exists!") if git_tag_exists(tag: new_version)
    UI.user_error!("Version #{previous_version} is not tagged! A hotfix branch cannot be created.") unless git_tag_exists(tag: previous_version)

    message = <<~MESSAGE
      Hotfix release:
      - Current release version: #{release_version_current}
      - New hotfix version: #{new_version}

      - Current build code: #{build_code_current}
      - New build code: #{version_code_new}

      Branching from tag: #{previous_version}
    MESSAGE
    UI.important(message)

    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    UI.message('Creating hotfix branch...')
    Fastlane::Helper::GitHelper.create_branch(release_branch_name(release_version: new_version), from: previous_version)
    UI.success("Done! New hotfix branch is: #{git_branch}")

    UI.message('Bumping hotfix version and build code...')
    VERSION_FILE.write_version(
      version_name: new_version,
      version_code: version_code_new
    )
    commit_version_bump
    # Print computed version and build to let user double-check outcome in logs
    UI.success("Done! New release version: #{release_version_current}. New build code: #{build_code_current}.")

    UI.important('Pushing new hotfix branch to remote...')
    push_to_git_remote(tags: false)

    # TODO: Switch to working branch and open back-merge PR
  end

  desc 'Finalizes a hotfix release by tagging the build'
  lane :finalize_hotfix_release do |skip_confirm: false|
    ensure_git_status_clean
    ensure_git_branch_is_release_branch!

    hotfix_version = release_version_current

    UI.important("Triggering hotfix build for version: #{hotfix_version}...")
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    trigger_release_build(branch_to_build: release_branch_name)
  end

  desc 'Updates store metadata and runs the release checks'
  lane :finalize_release do |skip_confirm: false|
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix(version_properties_path: VERSION_PROPERTIES_PATH)

    ensure_git_status_clean
    ensure_git_branch_is_release_branch!

    UI.important("Finalizing release: #{release_version_current}")
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    configure_apply(force: is_ci)

    check_translation_progress_all unless is_ci
    download_translations

    UI.message 'Bumping final release version and build code...'
    VERSION_FILE.write_version(
      version_name: release_version_current,
      version_code: build_code_next
    )
    commit_version_bump

    # Print computed version and build to let user double-check outcome in logs
    version = release_version_current
    build_code = build_code_current
    UI.success("Done! Final release version: #{version}. Final build code: #{build_code}.")

    download_metadata_strings(version: version, build_number: build_code)

    UI.important('Will push changes to remote and trigger the release build.')
    UI.user_error!("Terminating as requested. Don't forget to run the remainder of this automation manually.") unless skip_confirm || UI.confirm('Do you want to continue?')

    push_to_git_remote(tags: false)

    build_and_upload_release(create_release: true)

    create_release_backmerge_pr(version_to_merge: version, next_version: release_version_next)

    remove_branch_protection(
      repository: GITHUB_REPO,
      branch: release_branch_name
    )

    begin
      set_milestone_frozen_marker(
        repository: GITHUB_REPO,
        milestone: version,
        freeze: false
      )
      close_milestone(
        repository: GITHUB_REPO,
        milestone: version
      )
    rescue StandardError => e
      report_milestone_error(error_title: "Error in milestone finalization process for `#{version}`: #{e.message}")
    end
  end

  desc 'Build a Prototype Build and make it available for download'
  lane :build_and_upload_prototype_build do
    UI.user_error!("'BUILDKITE_ARTIFACTS_S3_BUCKET' must be defined as an environment variable.") unless ENV['BUILDKITE_ARTIFACTS_S3_BUCKET']

    prototype_build_type = 'Debug'

    gradle(
      task: 'assemble',
      build_type: prototype_build_type
    )

    filename = "simplenote-android-prototype-build-#{generate_prototype_build_number}.apk"

    upload_path = upload_to_s3(
      bucket: 'a8c-apps-public-artifacts',
      key: filename,
      file: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    )

    return if ENV['BUILDKITE_PULL_REQUEST'].nil?

    install_url = "#{PROTOTYPE_BUILD_DOMAIN}/#{upload_path}"

    unless ENV['BUILDKITE_PULL_REQUEST'].nil?
      comment_body = prototype_build_details_comment(
        app_display_name: 'Simplenote Android',
        download_url: install_url,
        metadata: {
          'Build Type': prototype_build_type
        }
      )

      comment_on_pr(
        project: GITHUB_REPO,
        pr_number: Integer(ENV.fetch('BUILDKITE_PULL_REQUEST', nil)),
        reuse_identifier: 'simplenote-prototype-build-link',
        body: comment_body
      )
    end

    if ENV['BUILDKITE']
      message = "Simplenote Android Prototype Build: [#{filename}](#{install_url})"
      sh('buildkite-agent', 'annotate', message, '--style', 'info', '--context', 'prototype-build')
    end
  end

  desc 'Take screenshots in the app'
  lane :take_screenshots do
    package = "#{APP_PACKAGE_NAME}.debug"

    # Reset the app in the emulator, just to avoid possible state related
    # issues
    begin
      adb(command: "shell pm clear #{package}")
    rescue StandardError
      UI.message('Failed to reset app data on emulator. This can happen when the app is not installed yet.')
    end

    # We use the screenshots build type for the app APK, which allows us to not
    # set the special permissions in the debug build type so that it doesn't
    # deviate from the release one. For the test APK though, we still use the
    # debug build type, as it's the only testable one, and there's no need to
    # make a dedicated one for the screenshots.
    gradle(task: 'assemble', build_type: 'Screenshots')
    gradle(task: 'assemble', build_type: 'DebugAndroidTest')

    capture_android_screenshots(
      locales: ['en-US'],
      output_directory: screenshots_directory,
      clear_previous_screenshots: false,
      app_package_name: package,
      app_apk_path: File.join(BUILD_FOLDER, 'outputs', 'apk', 'screenshots', 'Simplenote-screenshots.apk'),
      tests_apk_path: File.join(BUILD_FOLDER, 'outputs', 'apk', 'androidTest', 'debug', 'Simplenote-debug-androidTest.apk'),
      # Because the screenshot tests are together with other UI tests, we need
      # to specify to run only them and not all of the others.
      use_tests_in_classes: "#{APP_PACKAGE_NAME}.screenshots.ScreenshotTest",
      use_timestamp_suffix: false,
      # Need to use this in order to get access to the screenshots on the
      # emulator. Also note that you might need to run on a Google API
      # emulator, that is one without the Play Store. See
      # https://github.com/fastlane/fastlane/issues/15788#issuecomment-583778278
      use_adb_root: true
    )
  end

  def screenshots_directory
    File.join(Dir.pwd, 'screenshots')
  end

  private_lane :delete_old_changelogs do |options|
    Dir.glob('./metadata/android/*/').each do |folder|
      Dir["#{folder}changelogs/*"].each do |file|
        File.delete(file) if Integer(File.basename(file, '.*')) < Integer(options[:build])
      rescue StandardError
        puts "Cannot delete file #{file}"
      end
    end
  end

  private_lane :add_us_release_notes do |options|
    en_release_notes_path = File.join(METADATA_FOLDER, 'release_notes.txt')
    File.open(options[:release_notes_path], 'a') do |f|
      f.puts('<en-US>')
      f.puts("#{options[:version_name]}:")
      f.puts(File.read(en_release_notes_path))
      f.puts('</en-US>')
    end
  end

  private_lane :update_strings_for_translation_automation do
    sh("cd .. && mkdir -p #{UPDATE_STRINGS_PATH} && cp #{MAIN_STRINGS_PATH} #{UPDATE_STRINGS_PATH}")
    strings_path = File.join(UPDATE_STRINGS_PATH, 'strings.xml')
    git_commit(
      path: strings_path,
      message: 'Update strings file for translation automation',
      allow_nothing_to_commit: true
    )
  end

  # This function is Buildkite-specific
  def generate_prototype_build_number
    if ENV['BUILDKITE']
      commit = ENV.fetch('BUILDKITE_COMMIT', nil)[0, 7]
      branch = ENV['BUILDKITE_BRANCH'].parameterize
      pr_num = ENV.fetch('BUILDKITE_PULL_REQUEST', nil)

      pr_num == 'false' ? "#{branch}-#{commit}" : "pr#{pr_num}-#{commit}-#{ENV.fetch('BUILDKITE_JOB_ID', nil)}"
    else
      repo = Git.open(PROJECT_ROOT_FOLDER)
      commit = repo.current_branch.parameterize
      branch = repo.revparse('HEAD')[0, 7]

      "#{branch}-#{commit}"
    end
  end
end

def release_version_current
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  VERSION_FORMATTER.release_version(current_version)
end

def release_version_next
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  release_version_next = VERSION_CALCULATOR.next_release_version(version: current_version)
  VERSION_FORMATTER.release_version(release_version_next)
end

# Compute the version to be used by the code freeze step in the release process.
#
# It first increments the minor number, which also resets the build number to 0.
# It then bumps the build number so the -rc-1 can be appended to the code freeze version.
def release_version_for_code_freeze
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  next_version = VERSION_CALCULATOR.next_release_version(version: current_version)
  beta_version_first = VERSION_CALCULATOR.next_build_number(version: next_version)
  VERSION_FORMATTER.beta_version(beta_version_first)
end

def release_version_next_beta
  current_version = VERSION_FORMATTER.parse(VERSION_FILE.read_version_name)
  beta_version_next = VERSION_CALCULATOR.next_build_number(version: current_version)
  VERSION_FORMATTER.beta_version(beta_version_next)
end

def build_code_current
  build_code_current = VERSION_FILE.read_version_code
  BUILD_CODE_FORMATTER.build_code(build_code: build_code_current)
end

def build_code_next
  build_code_current = VERSION_FILE.read_version_code
  build_code_next = BUILD_CODE_CALCULATOR.next_build_code(build_code: build_code_current)
  BUILD_CODE_FORMATTER.build_code(build_code: build_code_next)
end

def commit_version_bump
  git_commit(
    path: VERSION_PROPERTIES_PATH,
    message: 'Bump version name and build code',
    allow_nothing_to_commit: false
  )
end

def release_branch_name(release_version: release_version_current)
  "#{RELEASE_BRANCH_ROOT}#{release_version}"
end

def ensure_git_branch_is_release_branch!
  # Verify that the current branch is a release branch.
  # Notice that `ensure_git_branch` expects a RegEx parameter.
  # Also, ensure_git_branch will fail the lane if the branch doesn't match, hence the ! in the method name.
  ensure_git_branch(branch: "^#{RELEASE_BRANCH_ROOT}")
end

RELEASE_BRANCH_ROOT = 'release/'

def create_release_backmerge_pr(version_to_merge:, next_version:)
  create_release_backmerge_pull_request(
    repository: GITHUB_REPO,
    source_branch: release_branch_name(release_version: version_to_merge),
    labels: ['Releases'],
    milestone_title: next_version
  )
rescue StandardError => e
  error_message = <<-MESSAGE
    Error creating backmerge pull request: #{e.message}
    If this is not the first time you are running the release task, the backmerge PR for the version `#{version_to_merge}` might have already been previously created.
    Please close any previous backmerge PR for `#{version_to_merge}`, delete the previous merge branch, then run the release task again.
  MESSAGE

  buildkite_annotate(style: 'error', context: 'error-creating-backmerge', message: error_message) if is_ci

  UI.user_error!(error_message)
end

def report_milestone_error(error_title:)
  error_message = <<-MESSAGE
    #{error_title}
    - If this is not the first time you are running the release task (e.g. retrying because it failed on first attempt), the milestone might have already been closed and this error is expected.
    - Otherwise, please investigate the error.
  MESSAGE

  UI.error(error_message)

  buildkite_annotate(style: 'warning', context: 'error-with-milestone', message: error_message) if is_ci
end
