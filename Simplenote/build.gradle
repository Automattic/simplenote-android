apply plugin: 'com.android.application'
apply plugin: 'io.sentry.android.gradle'

android {
    buildToolsVersion '28.0.3'
    compileSdkVersion 28

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }

        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    defaultConfig {
        applicationId "com.automattic.simplenote"
        versionName "1.8.2"
        versionCode 78
        minSdkVersion 23
        targetSdkVersion 28

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        checkReleaseBuilds false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

buildscript {
    dependencies {
        classpath 'io.sentry:sentry-android-gradle-plugin:1.7.16'
    }

    repositories {
        google()
        jcenter()
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    androidTestImplementation 'androidx.annotation:annotation:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0') {
        // Necessary to avoid version conflicts
        exclude group: 'androidx', module: 'appcompat'
        exclude group: 'androidx', module: 'support-v4'
        exclude group: 'androidx', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    // Automattic and WordPress dependencies
    implementation 'com.simperium.android:simperium:0.9.0'
    implementation 'com.automattic:tracks:1.2'
    implementation 'org.wordpress:passcodelock:1.7.0'

    // Google Support
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.1.0-alpha07'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.1'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    // Google Play Services
    implementation 'com.google.android.gms:play-services-wearable:17.0.0'
    // Third Party
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.commonsware.cwac:anddown:0.4.0'
    implementation 'net.openid:appauth:0.7.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'com.karumi:dexter:5.0.0'
    wearApp project(':Wear')
}

repositories {
    jcenter()
    maven { url "https://maven.google.com" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
}

if(["storeFile", "storePassword", "keyAlias", "keyPassword"].count { !project.hasProperty(it) } == 0 ){
    android {
      signingConfigs {
          release {
              storeFile = file(project.storeFile.replaceFirst("^~", System.getProperty("user.home")))
              storePassword = project.storePassword
              keyAlias = project.keyAlias
              keyPassword = project.keyPassword
          }
          debug {
              storeFile = file(project.storeFile.replaceFirst("^~", System.getProperty("user.home")))
              storePassword = project.storePassword
              keyAlias = project.keyAlias
              keyPassword = project.keyPassword
          }
      }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

task generateCrashlyticsConfig(group: "generate", description: "Generate Crashlytics config") {
    def outputFile = new File("${rootDir}/Simplenote/crashlytics.properties")
    def inputFile = file("${rootDir}/Simplenote/gradle.properties")
    if (!inputFile.exists()) {
        copy {
            from("${rootDir}/Simplenote")
            into("${rootDir}/Simplenote")
            include('gradle.properties-example')
            rename('gradle.properties-example', 'gradle.properties')
        }
    }
    outputs.file outputFile
    inputs.file inputFile
    doLast {
        def properties = new Properties()
        inputFile.withInputStream { stream ->
            properties.load(stream)
        }
        def crashlyticsApiKey = properties.getProperty('crashlyticsApiKey', '0')
        def writer = new FileWriter(outputFile)
        writer.write("""// auto-generated file from ${rootDir}/gradle.properties do not modify
apiKey=${crashlyticsApiKey}""")
        writer.close()
    }
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

static String toSnakeCase( String text ) {
    text.replaceAll( /([A-Z])/, /_$1/ ).replaceAll( /^_/, '' )
}

android.applicationVariants.all { variant ->
    variant.generateBuildConfigProvider.configure {
        dependsOn(generateCrashlyticsConfig)
    }
    def inputFile = file("${rootDir}/Simplenote/gradle.properties")
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        def key = toSnakeCase(property.key).toUpperCase()
        if (key == "SIMPERIUM_APP_ID" ||
            key == "SIMPERIUM_APP_KEY" ||
            key == "GOOGLE_ANALYTICS_ID" ||
            key == "SENTRY_DSN" ||
            key == "WPCOM_CLIENT_ID") {
            buildConfigField "String", key, "\"${property.value}\""
        }
    }
    buildConfigField "String", "BUILD", "\"${gitDescribe()}\""
    buildConfigField "String", "BUILD_HASH", "\"${gitHash()}\""
}
